import streamlit as st
import yaml
import io

# Translations dictionary
translations = {
    'ru': {
        'title': "–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞!",
        'send_file': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞",
        'course_title': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        'course_description': "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:",
        'num_topics': "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º:",
        'topic': "–¢–µ–º–∞",
        'chapter_name': "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –¥–ª—è —Ç–µ–º—ã",
        'info': "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–º—ã",
        'generate_yaml': "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å YAML",
        'generated_yaml': "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π YAML:",
        'download_yaml': "–°–∫–∞—á–∞—Ç—å YAML",
        'error': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π YAML."
    },
    'be': {
        'title': "–°—Ç–≤–∞—Ä—ç–Ω–Ω–µ –∫—É—Ä—Å–∞!",
        'send_file': "–ê–¥–ø—Ä–∞—û—Ü–µ —Ñ–∞–π–ª —Å—é–¥—ã",
        'course_title': "–£–≤—è–¥–∑—ñ—Ü–µ –Ω–∞–∑–≤—É –∫—É—Ä—Å–∞:",
        'course_description': "–£–≤—è–¥–∑—ñ—Ü–µ –∞–ø—ñ—Å–∞–Ω–Ω–µ –∫—É—Ä—Å–∞:",
        'num_topics': "–£–≤—è–¥–∑—ñ—Ü–µ –∫–æ–ª—å–∫–∞—Å—Ü—å —Ç—ç–º:",
        'topic': "–¢—ç–º–∞",
        'chapter_name': "–ù–∞–∑–≤–∞ –≥–ª–∞–≤—ã –¥–ª—è —Ç—ç–º—ã",
        'info': "–Ü–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è –¥–ª—è —Ç—ç–º—ã",
        'generate_yaml': "–°–≥–µ–Ω–µ—Ä–∞–≤–∞—Ü—å YAML",
        'generated_yaml': "–°–≥–µ–Ω–µ—Ä–∞–≤–∞–Ω—ã YAML:",
        'download_yaml': "–°–ø–∞–º–ø–∞–≤–∞—Ü—å YAML",
        'error': "–ö–∞–ª—ñ –ª–∞—Å–∫–∞, –∑–∞–ø–æ—û–Ω—ñ—Ü–µ —û—Å–µ –ø–∞–ª—ñ –ø–µ—Ä–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ã—è–π YAML."
    },
    'en': {
        'title': "Course Creation!",
        'send_file': "Send file here",
        'course_title': "Enter the name of the course:",
        'course_description': "Enter the description of the course:",
        'num_topics': "Enter the number of topics:",
        'topic': "Topic",
        'chapter_name': "Chapter name for topic",
        'info': "Info for topic",
        'generate_yaml': "Generate YAML",
        'generated_yaml': "Generated YAML:",
        'download_yaml': "Download YAML",
        'error': "Please fill in all fields before generating YAML."
    }
}

# Language selector with flags
language_options = {
    'ru': 'üá∑üá∫ Russian',
    'be': 'üáßüáæ Belarusian',
    'en': 'üá¨üáß English'
}
language = st.selectbox("Select Language", options=list(language_options.keys()), format_func=lambda x: language_options[x])

# Suggestion to use English
st.caption("üìù Please use English for the best results.")

# Function to create the YAML structure
def create_yaml(course_title, course_description, topics):
    course_data = {
        'name': course_title,
        'description': course_description,
        'course': {}
    }
    
    for i, topic in enumerate(topics, start=1):
        chapter_name = topic['chapter_name']
        info = topic['info']
        course_data['course'][i] = {
            'chapter-name': chapter_name,
            'info': info
        }
    
    return yaml.dump(course_data, sort_keys=False)

# Streamlit UI
st.title(translations[language]['title'])

# Add a hyperlink to the Telegram bot
telegram_link = "https://t.me/contactlabsbot"
st.markdown(f"[{translations[language]['send_file']}]({telegram_link})", unsafe_allow_html=True)

# Input for course title
course_title = st.text_input(translations[language]['course_title'])

# Input for course description
course_description = st.text_area(translations[language]['course_description'])

# Input for number of topics
num_topics = st.number_input(translations[language]['num_topics'], min_value=1, step=1)

# List to hold topic details
topics = []

# Input fields for each topic
for i in range(num_topics):
    st.subheader(f"{translations[language]['topic']} {i + 1}")
    chapter_name = st.text_input(f"{translations[language]['chapter_name']} {i + 1}:")
    info = st.text_area(f"{translations[language]['info']} {i + 1}:")
    
    if chapter_name and info:
        topics.append({'chapter_name': chapter_name, 'info': info})

# Button to generate YAML
if st.button(translations[language]['generate_yaml']):
    if course_title and course_description and topics:
        yaml_output = create_yaml(course_title, course_description, topics)
        st.subheader(translations[language]['generated_yaml'])
        st.code(yaml_output, language='yaml')
        
        # Create a download button for the YAML file
        yaml_bytes = io.BytesIO(yaml_output.encode('utf-8'))
        st.download_button(
            label=translations[language]['download_yaml'],
            data=yaml_bytes,
            file_name=f"{course_title.replace(' ', '_')}.yaml",
            mime="text/yaml"
        )
        
    else:
        st.error(translations[language]['error'])